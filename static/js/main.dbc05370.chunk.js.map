{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","searchInput","setSearchInput","filterStatus","setFilterStatus","renderer","setRenderer","displayedTodos","filter","todo","titleIncludes","title","toLowerCase","includes","idIncludes","id","toString","completed","useEffect","sourceArr","newTodos","length","i","randIndex","Math","floor","random","push","splice","flat","randomizeTodos","className","type","onClick","console","log","placeholder","onChange","event","target","value","map","classNames","htmlFor","checked","userId","request","endpoint","options","fetch","then","result","ok","Error","status","statusText","json","CurrentUser","clearUser","user","setUser","getUser","data","name","email","phone","App","setSelectedUserId","setTodos","loadTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbc05370.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number | null,\n  selectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectUser, selectedUserId,\n}) => {\n  const [searchInput, setSearchInput] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [renderer, setRenderer] = useState(true);\n\n  let displayedTodos = [...todos]\n    .filter(todo => {\n      const titleIncludes = todo.title.toLowerCase()\n        .includes(searchInput.toLowerCase());\n\n      const idIncludes = todo.id.toString()\n        .includes(searchInput.toString());\n\n      return titleIncludes || idIncludes;\n    })\n    .filter(todo => {\n      switch (filterStatus) {\n        case 'completed':\n          return todo.completed === true;\n        case 'not-completed':\n          return todo.completed === false;\n        case 'not-set':\n          return todo.completed === null;\n        default:\n          return todo;\n      }\n    });\n\n  const randomizeTodos = () => {\n    const sourceArr = [...displayedTodos];\n    const newTodos: any = [];\n\n    for (let i = 0; i < sourceArr.length; i + 1) {\n      const randIndex = Math.floor(sourceArr.length * Math.random());\n\n      newTodos.push(sourceArr.splice(randIndex, 1));\n    }\n\n    return newTodos.flat();\n  };\n\n  useEffect(() => {\n    displayedTodos = randomizeTodos();\n  }, [renderer]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>{`Todos: ${displayedTodos.length}`}</h2>\n\n      <button\n        className=\"TodoList__randomize-button\"\n        type=\"button\"\n        onClick={() => {\n          console.log('randomize clicked');\n          setRenderer(!renderer);\n        }}\n      >\n        <p>ðŸ”€ Randomize todos</p>\n      </button>\n      <br />\n\n      <input\n        className=\"TodoList__title-input\"\n        type=\"text\"\n        placeholder=\"Search title\"\n        onChange={(event) => {\n          setSearchInput(event.target.value);\n        }}\n      />\n      {'\\u00A0'}\n      <select\n        className=\"TodoList__status-select\"\n        onChange={(event) => {\n          setFilterStatus(event.target.value);\n        }}\n      >\n        <option value=\"\">Pick status to filter</option>\n        <option value=\"completed\">Complete</option>\n        <option value=\"not-completed\">Not complete</option>\n        <option value=\"not-set\">Not set</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n\n          {displayedTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n            >\n              <label htmlFor={todo.id.toString()}>\n                <input\n                  id={todo.id.toString()}\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  onChange={(event) => console.log(+event.target.id)}\n                />\n                <p>{`${todo.id}: ${todo.title}`}</p>\n              </label>\n\n              <button\n                className={classNames('TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': selectedUserId === todo.userId })}\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                select\n              </button>\n            </li>\n          ))}\n\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (endpoint: string, options?: {}) => {\n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then(result => {\n      if (!result.ok) {\n        throw new Error(`${result.status} - ${result.statusText}`);\n      }\n\n      return result.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUserTodos = (userId: number) => {\n  return request(`/todos?userId=${userId}`);\n};\n\nexport const getUsers = () => {\n  return request('/users');\n};\n\nexport const getUser = (userId: number | null) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number | null,\n  clearUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId, clearUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(data => setUser(data));\n  }, [userId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            <h2 className=\"CurrentUser__title\">\n              {`Clear Selected user: ${user.id}`}\n            </h2>\n          </button>\n\n          <h3 className=\"CurrentUser__name\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport * as api from './api/api';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const loadTodos = () => {\n    api.getTodos()\n      .then(data => setTodos(data));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          selectUser={(userId: number) => {\n            setSelectedUserId(userId);\n          }}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={() => {\n                setSelectedUserId(null);\n              }}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}